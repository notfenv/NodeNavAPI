"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[273],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},25304:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:100},i="Examples",s={unversionedId:"Examples",id:"Examples",title:"Examples",description:"Here are some open-source examples of node navigation being used.",source:"@site/docs/Examples.md",sourceDirName:".",slug:"/Examples",permalink:"/NodeNavAPI/docs/Examples",draft:!1,editUrl:"https://github.com/notfenv/NodeNavAPI/edit/master/docs/Examples.md",tags:[],version:"current",sidebarPosition:100,frontMatter:{sidebar_position:100},sidebar:"defaultSidebar",previous:{title:"Intro",permalink:"/NodeNavAPI/docs/intro"},next:{title:"Set Up / Basics",permalink:"/NodeNavAPI/docs/Setup"}},l={},p=[],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Here are some open-source examples of node navigation being used."),(0,r.kt)("h1",{id:"mannequin-ai"},"Mannequin AI"),(0,r.kt)("p",null,"Movement for a mannequin AI by ",(0,r.kt)("a",{parentName:"p",href:"https://www.roblox.com/users/124963457/profile"},"@notawildfox")," similar to the one in the new game ",(0,r.kt)("a",{parentName:"p",href:"https://www.roblox.com/games/15428225119/DESCENT"},"DESCENT")," that moves\nonly when out of line of sight, and has deceleration/acceleration."),(0,r.kt)("p",null,"This example uses ",(0,r.kt)("b",null,"Dijkstra's"),' algorithm, because Dijkstra\'s paths are less "zigzaggy" unlike how A* cost evaluation works '),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'--[=[\n    Makes the entity traverse along a path.\n    @param path NavigatorPath -- The path to traverse along.\n]=]\ntype Path = NodeNavigator.Path\nlocal pathId = 0\nlocal function TraversePath(path: Path): ()\n    -- Get id for interruption when necessary\n    pathId = (pathId + 1) % 1000\n    local myPath = pathId\n\n    -- Traverse path\n    local waypoints = path:GetWaypoints()\n    table.remove(waypoints, 1) -- first waypoint is root position, removing it as it bricks the mannequin movement a tiny bit\n\n    for i, waypoint in waypoints do\n        if pathId ~= myPath then break end\n        if inView then\n            -- We\'re being observed, freeze.\n            moving = false\n            break\n        end\n\n        -- Start navigating\n        local targetPosition = waypoint.Position\n        Humanoid:MoveTo(targetPosition)\n\n        -- Yield until reached\n        repeat\n            task.wait()\n        until (RootPart.Position - targetPosition).Magnitude <= 2 or pathId ~= myPath or inView or not moving\n    end\nend\n\n\n--[=[\n    Makes the entity follow its target.\n]=]\nlocal function MoveToTarget(): ()\n    if not target or inView then return end\n\n    moving = true\n\n    -- Start accelerating\n    Accelerate()\n\n    -- Start pathfinding\n    while moving and not inView and target do\n        local otherRootPart = target:FindFirstChild("HumanoidRootPart") :: BasePart\n        if not otherRootPart then\n            target = nil\n            moving = false\n            break\n        end\n\n        -- Compute path from our position to target\'s current position\n        local success, path =\n            Navigator\n                :TryComputePath(RootPart.Position, otherRootPart.Position, nil, "Dijkstra")\n                :await()\n        if not success then\n            break\n        end\n\n        -- Traverse path\n        task.spawn(TraversePath, path)\n\n        -- Yield until complete or cancelled\n        local nextRecompute = time() + PATH_RECOMPUTE_INTERVAL\n        repeat\n            task.wait()\n        until time() > nextRecompute or not moving or inView\n    end\n\n    -- Grind to halt\n    Decelerate()\n    moving = false\nend\n')))}m.isMDXComponent=!0}}]);